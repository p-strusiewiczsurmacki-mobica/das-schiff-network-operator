// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/worker (interfaces: Client)

// Package mock_worker is a generated GoMock package.
package mock_worker

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/telekom/das-schiff-network-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// SendConfig mocks base method.
func (m *MockClient) SendConfig(arg0 context.Context, arg1 *v1alpha1.NodeNetworkConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendConfig indicates an expected call of SendConfig.
func (mr *MockClientMockRecorder) SendConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendConfig", reflect.TypeOf((*MockClient)(nil).SendConfig), arg0, arg1)
}
