// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/config_map (interfaces: Interface)

// Package mock_config_map is a generated GoMock package.
package mock_config_map

import (
	reflect "reflect"

	nodeconfig "github.com/telekom/das-schiff-network-operator/pkg/nodeconfig"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInterface) Delete(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", arg0)
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockInterface) Get(arg0 string) (nodeconfig.ConfigInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(nodeconfig.ConfigInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInterfaceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInterface)(nil).Get), arg0)
}

// GetSlice mocks base method.
func (m *MockInterface) GetSlice() ([]nodeconfig.ConfigInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlice")
	ret0, _ := ret[0].([]nodeconfig.ConfigInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlice indicates an expected call of GetSlice.
func (mr *MockInterfaceMockRecorder) GetSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlice", reflect.TypeOf((*MockInterface)(nil).GetSlice))
}

// Load mocks base method.
func (m *MockInterface) Load(arg0 interface{}) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockInterfaceMockRecorder) Load(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockInterface)(nil).Load), arg0)
}

// Range mocks base method.
func (m *MockInterface) Range(arg0 func(interface{}, interface{}) bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Range", arg0)
}

// Range indicates an expected call of Range.
func (mr *MockInterfaceMockRecorder) Range(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Range", reflect.TypeOf((*MockInterface)(nil).Range), arg0)
}

// Store mocks base method.
func (m *MockInterface) Store(arg0, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Store", arg0, arg1)
}

// Store indicates an expected call of Store.
func (mr *MockInterfaceMockRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockInterface)(nil).Store), arg0, arg1)
}
