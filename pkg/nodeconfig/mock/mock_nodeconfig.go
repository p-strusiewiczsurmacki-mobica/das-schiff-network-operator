// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/nodeconfig (interfaces: ConfigInterface)

// Package mock_nodeconfig is a generated GoMock package.
package mock_nodeconfig

import (
	context "context"
	reflect "reflect"
	time "time"

	logr "github.com/go-logr/logr"
	v1alpha1 "github.com/telekom/das-schiff-network-operator/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockConfigInterface is a mock of ConfigInterface interface.
type MockConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigInterfaceMockRecorder
}

// MockConfigInterfaceMockRecorder is the mock recorder for MockConfigInterface.
type MockConfigInterfaceMockRecorder struct {
	mock *MockConfigInterface
}

// NewMockConfigInterface creates a new mock instance.
func NewMockConfigInterface(ctrl *gomock.Controller) *MockConfigInterface {
	mock := &MockConfigInterface{ctrl: ctrl}
	mock.recorder = &MockConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigInterface) EXPECT() *MockConfigInterfaceMockRecorder {
	return m.recorder
}

// CrateInvalid mocks base method.
func (m *MockConfigInterface) CrateInvalid(arg0 context.Context, arg1 client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CrateInvalid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CrateInvalid indicates an expected call of CrateInvalid.
func (mr *MockConfigInterfaceMockRecorder) CrateInvalid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CrateInvalid", reflect.TypeOf((*MockConfigInterface)(nil).CrateInvalid), arg0, arg1)
}

// CreateBackup mocks base method.
func (m *MockConfigInterface) CreateBackup(arg0 context.Context, arg1 client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockConfigInterfaceMockRecorder) CreateBackup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockConfigInterface)(nil).CreateBackup), arg0, arg1)
}

// DeleteInvalid mocks base method.
func (m *MockConfigInterface) DeleteInvalid(arg0 context.Context, arg1 client.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvalid", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvalid indicates an expected call of DeleteInvalid.
func (mr *MockConfigInterfaceMockRecorder) DeleteInvalid(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvalid", reflect.TypeOf((*MockConfigInterface)(nil).DeleteInvalid), arg0, arg1)
}

// Deploy mocks base method.
func (m *MockConfigInterface) Deploy(arg0 context.Context, arg1 client.Client, arg2 logr.Logger, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deploy indicates an expected call of Deploy.
func (mr *MockConfigInterfaceMockRecorder) Deploy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockConfigInterface)(nil).Deploy), arg0, arg1, arg2, arg3)
}

// GetActive mocks base method.
func (m *MockConfigInterface) GetActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetActive indicates an expected call of GetActive.
func (mr *MockConfigInterfaceMockRecorder) GetActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActive", reflect.TypeOf((*MockConfigInterface)(nil).GetActive))
}

// GetCancelFunc mocks base method.
func (m *MockConfigInterface) GetCancelFunc() *context.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCancelFunc")
	ret0, _ := ret[0].(*context.CancelFunc)
	return ret0
}

// GetCancelFunc indicates an expected call of GetCancelFunc.
func (mr *MockConfigInterfaceMockRecorder) GetCancelFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCancelFunc", reflect.TypeOf((*MockConfigInterface)(nil).GetCancelFunc))
}

// GetCurrent mocks base method.
func (m *MockConfigInterface) GetCurrent() *v1alpha1.NodeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent")
	ret0, _ := ret[0].(*v1alpha1.NodeConfig)
	return ret0
}

// GetCurrent indicates an expected call of GetCurrent.
func (mr *MockConfigInterfaceMockRecorder) GetCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockConfigInterface)(nil).GetCurrent))
}

// GetDeployed mocks base method.
func (m *MockConfigInterface) GetDeployed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeployed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetDeployed indicates an expected call of GetDeployed.
func (mr *MockConfigInterfaceMockRecorder) GetDeployed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployed", reflect.TypeOf((*MockConfigInterface)(nil).GetDeployed))
}

// GetInvalid mocks base method.
func (m *MockConfigInterface) GetInvalid() *v1alpha1.NodeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvalid")
	ret0, _ := ret[0].(*v1alpha1.NodeConfig)
	return ret0
}

// GetInvalid indicates an expected call of GetInvalid.
func (mr *MockConfigInterfaceMockRecorder) GetInvalid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvalid", reflect.TypeOf((*MockConfigInterface)(nil).GetInvalid))
}

// GetName mocks base method.
func (m *MockConfigInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockConfigInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockConfigInterface)(nil).GetName))
}

// GetNext mocks base method.
func (m *MockConfigInterface) GetNext() *v1alpha1.NodeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNext")
	ret0, _ := ret[0].(*v1alpha1.NodeConfig)
	return ret0
}

// GetNext indicates an expected call of GetNext.
func (mr *MockConfigInterfaceMockRecorder) GetNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNext", reflect.TypeOf((*MockConfigInterface)(nil).GetNext))
}

// SetActive mocks base method.
func (m *MockConfigInterface) SetActive(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActive", arg0)
}

// SetActive indicates an expected call of SetActive.
func (mr *MockConfigInterfaceMockRecorder) SetActive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActive", reflect.TypeOf((*MockConfigInterface)(nil).SetActive), arg0)
}

// SetBackupAsNext mocks base method.
func (m *MockConfigInterface) SetBackupAsNext() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBackupAsNext")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetBackupAsNext indicates an expected call of SetBackupAsNext.
func (mr *MockConfigInterfaceMockRecorder) SetBackupAsNext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBackupAsNext", reflect.TypeOf((*MockConfigInterface)(nil).SetBackupAsNext))
}

// SetCancelFunc mocks base method.
func (m *MockConfigInterface) SetCancelFunc(arg0 *context.CancelFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCancelFunc", arg0)
}

// SetCancelFunc indicates an expected call of SetCancelFunc.
func (mr *MockConfigInterfaceMockRecorder) SetCancelFunc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCancelFunc", reflect.TypeOf((*MockConfigInterface)(nil).SetCancelFunc), arg0)
}

// SetDeployed mocks base method.
func (m *MockConfigInterface) SetDeployed(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeployed", arg0)
}

// SetDeployed indicates an expected call of SetDeployed.
func (mr *MockConfigInterfaceMockRecorder) SetDeployed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeployed", reflect.TypeOf((*MockConfigInterface)(nil).SetDeployed), arg0)
}

// UpdateNext mocks base method.
func (m *MockConfigInterface) UpdateNext(arg0 *v1alpha1.NodeConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateNext", arg0)
}

// UpdateNext indicates an expected call of UpdateNext.
func (mr *MockConfigInterfaceMockRecorder) UpdateNext(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNext", reflect.TypeOf((*MockConfigInterface)(nil).UpdateNext), arg0)
}
