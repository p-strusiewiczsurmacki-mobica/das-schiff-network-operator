// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/healthcheck (interfaces: Adapter,FRRInterface,TCPDialerInterface)

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	context "context"
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// CheckAPIServer mocks base method.
func (m *MockAdapter) CheckAPIServer(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAPIServer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAPIServer indicates an expected call of CheckAPIServer.
func (mr *MockAdapterMockRecorder) CheckAPIServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAPIServer", reflect.TypeOf((*MockAdapter)(nil).CheckAPIServer), arg0)
}

// CheckInterfaces mocks base method.
func (m *MockAdapter) CheckInterfaces() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInterfaces")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckInterfaces indicates an expected call of CheckInterfaces.
func (mr *MockAdapterMockRecorder) CheckInterfaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInterfaces", reflect.TypeOf((*MockAdapter)(nil).CheckInterfaces))
}

// CheckReachability mocks base method.
func (m *MockAdapter) CheckReachability() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReachability")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckReachability indicates an expected call of CheckReachability.
func (mr *MockAdapterMockRecorder) CheckReachability() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReachability", reflect.TypeOf((*MockAdapter)(nil).CheckReachability))
}

// IsFRRActive mocks base method.
func (m *MockAdapter) IsFRRActive() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFRRActive")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFRRActive indicates an expected call of IsFRRActive.
func (mr *MockAdapterMockRecorder) IsFRRActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFRRActive", reflect.TypeOf((*MockAdapter)(nil).IsFRRActive))
}

// RemoveTaints mocks base method.
func (m *MockAdapter) RemoveTaints(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTaints", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTaints indicates an expected call of RemoveTaints.
func (mr *MockAdapterMockRecorder) RemoveTaints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTaints", reflect.TypeOf((*MockAdapter)(nil).RemoveTaints), arg0)
}

// TaintsRemoved mocks base method.
func (m *MockAdapter) TaintsRemoved() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaintsRemoved")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TaintsRemoved indicates an expected call of TaintsRemoved.
func (mr *MockAdapterMockRecorder) TaintsRemoved() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaintsRemoved", reflect.TypeOf((*MockAdapter)(nil).TaintsRemoved))
}

// MockFRRInterface is a mock of FRRInterface interface.
type MockFRRInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFRRInterfaceMockRecorder
}

// MockFRRInterfaceMockRecorder is the mock recorder for MockFRRInterface.
type MockFRRInterfaceMockRecorder struct {
	mock *MockFRRInterface
}

// NewMockFRRInterface creates a new mock instance.
func NewMockFRRInterface(ctrl *gomock.Controller) *MockFRRInterface {
	mock := &MockFRRInterface{ctrl: ctrl}
	mock.recorder = &MockFRRInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFRRInterface) EXPECT() *MockFRRInterfaceMockRecorder {
	return m.recorder
}

// GetStatusFRR mocks base method.
func (m *MockFRRInterface) GetStatusFRR() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusFRR")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatusFRR indicates an expected call of GetStatusFRR.
func (mr *MockFRRInterfaceMockRecorder) GetStatusFRR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusFRR", reflect.TypeOf((*MockFRRInterface)(nil).GetStatusFRR))
}

// MockTCPDialerInterface is a mock of TCPDialerInterface interface.
type MockTCPDialerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTCPDialerInterfaceMockRecorder
}

// MockTCPDialerInterfaceMockRecorder is the mock recorder for MockTCPDialerInterface.
type MockTCPDialerInterfaceMockRecorder struct {
	mock *MockTCPDialerInterface
}

// NewMockTCPDialerInterface creates a new mock instance.
func NewMockTCPDialerInterface(ctrl *gomock.Controller) *MockTCPDialerInterface {
	mock := &MockTCPDialerInterface{ctrl: ctrl}
	mock.recorder = &MockTCPDialerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPDialerInterface) EXPECT() *MockTCPDialerInterfaceMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockTCPDialerInterface) Dial(arg0, arg1 string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0, arg1)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockTCPDialerInterfaceMockRecorder) Dial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockTCPDialerInterface)(nil).Dial), arg0, arg1)
}
