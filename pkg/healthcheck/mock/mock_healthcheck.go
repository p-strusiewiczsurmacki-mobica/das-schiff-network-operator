// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/healthcheck (interfaces: FRRInterface,TCPDialerInterface)

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFRRInterface is a mock of FRRInterface interface.
type MockFRRInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFRRInterfaceMockRecorder
}

// MockFRRInterfaceMockRecorder is the mock recorder for MockFRRInterface.
type MockFRRInterfaceMockRecorder struct {
	mock *MockFRRInterface
}

// NewMockFRRInterface creates a new mock instance.
func NewMockFRRInterface(ctrl *gomock.Controller) *MockFRRInterface {
	mock := &MockFRRInterface{ctrl: ctrl}
	mock.recorder = &MockFRRInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFRRInterface) EXPECT() *MockFRRInterfaceMockRecorder {
	return m.recorder
}

// GetStatusFRR mocks base method.
func (m *MockFRRInterface) GetStatusFRR() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusFRR")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatusFRR indicates an expected call of GetStatusFRR.
func (mr *MockFRRInterfaceMockRecorder) GetStatusFRR() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusFRR", reflect.TypeOf((*MockFRRInterface)(nil).GetStatusFRR))
}

// MockTCPDialerInterface is a mock of TCPDialerInterface interface.
type MockTCPDialerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTCPDialerInterfaceMockRecorder
}

// MockTCPDialerInterfaceMockRecorder is the mock recorder for MockTCPDialerInterface.
type MockTCPDialerInterfaceMockRecorder struct {
	mock *MockTCPDialerInterface
}

// NewMockTCPDialerInterface creates a new mock instance.
func NewMockTCPDialerInterface(ctrl *gomock.Controller) *MockTCPDialerInterface {
	mock := &MockTCPDialerInterface{ctrl: ctrl}
	mock.recorder = &MockTCPDialerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTCPDialerInterface) EXPECT() *MockTCPDialerInterfaceMockRecorder {
	return m.recorder
}

// Dial mocks base method.
func (m *MockTCPDialerInterface) Dial(arg0, arg1 string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dial", arg0, arg1)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial.
func (mr *MockTCPDialerInterfaceMockRecorder) Dial(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockTCPDialerInterface)(nil).Dial), arg0, arg1)
}
