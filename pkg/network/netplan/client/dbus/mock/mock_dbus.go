// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/das-schiff-network-operator/pkg/network/netplan/client/dbus (interfaces: IConn)

// Package mock_dbus is a generated GoMock package.
package mock_dbus

import (
	reflect "reflect"

	dbus "github.com/godbus/dbus/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockIConn is a mock of IConn interface.
type MockIConn struct {
	ctrl     *gomock.Controller
	recorder *MockIConnMockRecorder
}

// MockIConnMockRecorder is the mock recorder for MockIConn.
type MockIConnMockRecorder struct {
	mock *MockIConn
}

// NewMockIConn creates a new mock instance.
func NewMockIConn(ctrl *gomock.Controller) *MockIConn {
	mock := &MockIConn{ctrl: ctrl}
	mock.recorder = &MockIConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConn) EXPECT() *MockIConnMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockIConn) Auth(arg0 []dbus.Auth) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockIConnMockRecorder) Auth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockIConn)(nil).Auth), arg0)
}

// Close mocks base method.
func (m *MockIConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConn)(nil).Close))
}

// Hello mocks base method.
func (m *MockIConn) Hello() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello")
	ret0, _ := ret[0].(error)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockIConnMockRecorder) Hello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockIConn)(nil).Hello))
}

// Object mocks base method.
func (m *MockIConn) Object(arg0 string, arg1 dbus.ObjectPath) dbus.BusObject {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object", arg0, arg1)
	ret0, _ := ret[0].(dbus.BusObject)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockIConnMockRecorder) Object(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockIConn)(nil).Object), arg0, arg1)
}
